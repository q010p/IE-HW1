{"version":3,"sources":["dynamic-form/location-type-field/LocationTypeField.js","dynamic-form/DynamicForm.js","serviceWorker.js","index.js","dynamic-form/FormList.js"],"names":["GoogleApiWrapper","apiKey","LoadingContainer","props","style","height","width","React","useState","initialCenter","markerPosition","setMarkerPosition","position","minWidth","maxWidth","onClick","mapProps","map","clickEvent","newPosition","lat","latLng","lng","undefined","onMarkerChanged","google","zoom","useStyles","makeStyles","theme","formControl","margin","spacing","selectEmpty","marginTop","formTextField","formMapElement","DynamicForm","PAGE_STATE_LOADED","classes","apiCallCount","state","setState","pageState","setPageState","resultForm","setResultForm","useEffect","fetch","formId","then","res","json","result","initialPosition","getMarkerPositionKeyState","fieldName","createElement","className","title","method","fields","field","key","name","options","FormControl","variant","InputLabel","htmlFor","Select","required","labelWidth","length","inputProps","id","option","MenuItem","value","JSON","stringify","label","type","TextField","hidden","prevState","console","log","renderFormSwitch","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","PAGE_STATE_LOADING","PAGE_STATE_ERROR","formList","setFormList","count","List","component","aria-label","form","ListItem","button","ListItemText","primary","handleFormClick","bind","renderList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aaf20037.chunk.js","sourcesContent":["import React from 'react';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\n\n/**\n * \n * @param initialCenter props required \n * @function onMarkerChanged(newPosition) props - not required\n */\n\nexport function LocationTypeField(props) {\n    const [markerPosition, setMarkerPosition] = React.useState(props.initialCenter)\n    return (\n        <div style={{ position: 'relative', height: '40vh',minWidth:'60vh', maxWidth: '80vh' }}>\n            <Map\n                onClick={mapOnClick}\n                google={props.google}\n                zoom={14}\n                initialCenter={props.initialCenter}\n                style={{\n                    width: '100%',\n                    height: '100%',\n                }}\n            >\n                <Marker position={markerPosition} />\n\n            </Map>\n        </div>\n    );\n    function mapOnClick(mapProps, map, clickEvent) {\n        const newPosition = { lat: clickEvent.latLng.lat(), lng: clickEvent.latLng.lng() };\n        setMarkerPosition(newPosition)\n        if (props.onMarkerChanged !== undefined)\n            props.onMarkerChanged(newPosition)\n    }\n}\n\n\n\nconst LoadingContainer = (props) => (\n    <div style={{ height: '30vh', width: '30vh' }}>Loading map!</div>\n)\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyDjs0u02-62FMwrtxMxci5pc6PIubSyW28'),\n    LoadingContainer: LoadingContainer\n})(LocationTypeField)","import React, { useEffect, useState, useRef } from 'react'\nimport LocationTypeField from './location-type-field/LocationTypeField'\nimport './dynamic-form.css'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    formControl: {\n        width: '100%',\n        margin: theme.spacing(1),\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    formTextField: {\n        margin: theme.spacing(1),\n        width: '100%',\n        height: '100%',\n    },\n    formMapElement: {\n        width: '100%',\n        height: '100%'\n    }\n}));\n\n\nfunction DynamicForm(props) {\n    \n\n    const PAGE_STATE_LOADING = \"LOADING\"\n    const PAGE_STATE_ERROR = \"ERROR\"\n    const PAGE_STATE_LOADED = \"LOADED\"\n\n\n    const classes = useStyles()\n    const [apiCallCount, setApiCallCount] = useState(0)\n    const [state, setState] = React.useState({})\n    const [pageState, setPageState] = useState(PAGE_STATE_LOADING)\n    const [resultForm, setResultForm] = useState()\n    useEffect(() => {\n        setPageState(PAGE_STATE_LOADING)\n        fetch(`http://localhost:4020/api/forms/${props.formId}`)\n            .then(res => res.json())\n            .then((result => {\n                setResultForm(result)\n                setPageState(PAGE_STATE_LOADED)\n            }))\n    }, [apiCallCount])\n    const initialPosition = { lat: 35.717752, lng: 51.370039 }\n\n\n    function renderFormSwitch(field) {\n        if (field.options !== undefined) {\n            if (pageState === PAGE_STATE_LOADED)\n                return (\n                    <div>\n                        <FormControl className={classes.formControl} variant=\"outlined\" >\n                            <InputLabel htmlFor={field.name + 'Select'}>\n                                {field.title}\n                            </InputLabel>\n                            <Select\n                                required={true}\n                                labelWidth={field.title.length*9}\n                                inputProps={{\n                                    name: field.name,\n                                    id: field.name + \"Select\"\n                                }}\n                            >\n                                {\n                                    field.options.map(option => {\n                                        return <MenuItem key={option.value} value={JSON.stringify(option.value)}>{option.label}</MenuItem>\n                                    })\n                                }\n                            </Select>\n                        </FormControl>\n                    </div>\n                )\n        } else\n            switch (field.type) {\n                case 'Text':\n                    return <TextField variant=\"outlined\" required={field.required} className={classes.formTextField} label={field.title} name={field.name} type=\"text\" />\n                case 'Number':\n                    return <TextField variant=\"outlined\" className={classes.formTextField} label={field.title} name={field.name} type=\"number\" />\n                case 'Location':\n                    if (state[getMarkerPositionKeyState(field.name)] === undefined)\n                        state[getMarkerPositionKeyState(field.name)] = initialPosition\n                    return <div>\n                        <p>{field.title}</p>\n                        <div className={classes.formMapElement}>\n                            <input name={field.name} value={JSON.stringify(state[getMarkerPositionKeyState(field.name)])} hidden></input>\n                            <LocationTypeField\n                                onMarkerChanged={(newPosition) => {\n                                    setState(prevState => {\n                                        return {\n                                            ...prevState,\n                                            [getMarkerPositionKeyState(field.name)]: newPosition\n                                        }\n                                    })\n                                    console.log(state)\n                                }} initialCenter={initialPosition} />\n                        </div>\n                    </div>\n                case 'Date':\n                    return <TextField variant=\"outlined\" className={classes.formTextField} label={field.title} name={field.name} type=\"date\" />\n                default:\n                    return <p>type {field.type} not supported</p>\n            }\n    }\n    function getMarkerPositionKeyState(fieldName) {\n        return `${fieldName}MarkerPosition`\n    }\n\n    if (pageState === PAGE_STATE_LOADING)\n        return <div>loading</div>\n    else if (pageState === PAGE_STATE_ERROR)\n        return <div>error</div>\n    else\n        if (pageState === PAGE_STATE_LOADED)\n            return (\n                React.createElement('div', { className: 'DynamicForm' },\n                    <div className='DynamicForm'>\n                        <h1>{resultForm.title}</h1>\n                        <form method='post'>\n                            {\n                                resultForm.fields.map((field) => {\n                                    return <div key={field.name}>\n                                        {\n                                            renderFormSwitch(field)\n                                        }\n                                    </div>\n                                })\n                            }\n                            <Button style={{ margin: '8px', width: '100%' }} type='submit' variant=\"contained\" color=\"primary\">\n                                submit\n                        </Button>\n                        </form>\n                    </div>\n                )\n\n            );\n}\n\n\n\nexport default DynamicForm;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DynamicForm from './dynamic-form/DynamicForm';\nimport * as serviceWorker from './serviceWorker';\nimport FormList from './dynamic-form/FormList'\n\n\nReactDOM.render(<FormList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DynamicForm from './DynamicForm';\n\n\n\nexport default function FormList(props) {\n\n    const PAGE_STATE_LOADING = \"LOADING\"\n    const PAGE_STATE_ERROR = \"ERROR\"\n    const PAGE_STATE_LOADED = \"LOADED\"\n\n    const [formList, setFormList] = useState()\n    const [pageState, setPageState] = useState(PAGE_STATE_LOADING)\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n        fetchList()\n    }, [count])\n    return renderList();\n\n    function fetchList() {\n        setPageState(PAGE_STATE_LOADING)\n        console.log('loading')\n        fetch('https://ie-hw1.herokuapp.com/api/forms')\n            .then(res => res.json())\n            .then((result => {\n                setFormList(result)\n                setPageState(PAGE_STATE_LOADED)\n            }))\n    }\n\n    function handleFormClick(id) {\n        ReactDOM.render(<DynamicForm formId={id} />, document.getElementById('root'));\n    }\n    function renderList() {\n\n        switch (pageState) {\n            case PAGE_STATE_LOADED:\n                return (\n                    <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                        {\n                            formList.map(form => {\n                                return (\n                                    <ListItem button key={form.id}>\n                                        <ListItemText primary={form.title} onClick={handleFormClick.bind(\"id\", form.id)} />\n                                    </ListItem>)\n                            })\n                        }\n                    </List>\n                )\n\n            case PAGE_STATE_LOADING:\n                return (\n                    <p>loading</p>\n                )\n\n            case PAGE_STATE_ERROR:\n                return (\n                    <p>error</p>\n                )\n\n            default:\n\n        }\n\n    }\n}"],"sourceRoot":""}